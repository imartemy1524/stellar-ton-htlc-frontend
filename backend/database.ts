import sqlite3 from 'sqlite3';

const db = new sqlite3.Database('./htlc.db', sqlite3.OPEN_READWRITE | sqlite3.OPEN_CREATE, (err: Error | null) => {
  if (err) {
    console.error("Failed to connect to database:", err.message);
  } else {
    console.log('Connected to the htlc database.');
    setupDatabase();
  }
});

function setupDatabase(): void {
  db.serialize(() => {
    // Drop old table if it exists, for a clean schema during development. 
    // WARNING: This deletes all existing data in the offers table.
    // db.run(`DROP TABLE IF EXISTS offers`); 
    // console.log('Old offers table dropped if it existed.');

    db.run(`CREATE TABLE IF NOT EXISTS offers (
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      status INTEGER DEFAULT 0,
      amountfrom REAL NOT NULL,
      amountto REAL NOT NULL,
      networkfrom TEXT NOT NULL, -- e.g., 'TON' or 'Stellar'
      networkto TEXT NOT NULL,   -- e.g., 'TON' or 'Stellar'
      fromtoken TEXT,            -- Token symbol or address on networkfrom
      totoken TEXT,              -- Token symbol or address on networkto
      
      creator_ton_address TEXT NOT NULL,
      creator_stellar_address TEXT NOT NULL,
      taker_ton_address TEXT,
      taker_stellar_address TEXT,
      
      privatekey TEXT,           -- Secret preimage generated by taker
      startedat DATETIME DEFAULT CURRENT_TIMESTAMP,
      
      ton_htlc_address_user_a TEXT,    -- Creator's HTLC address if they deployed on TON
      ton_htlc_address_user_b TEXT,    -- Taker's HTLC address if they deployed on TON
      stellar_htlc_address_user_a TEXT, -- Creator's HTLC address if they deployed on Stellar
      stellar_htlc_address_user_b TEXT  -- Taker's HTLC address if they deployed on Stellar
    )`, (err: Error | null) => {
      if (err) {
        console.error('Error creating table "offers":', err.message);
      } else {
        console.log('Table "offers" ensured.');
        // Add new columns if they don't exist (idempotent for most SQLite versions for ADD COLUMN)
        const columns = [
          { name: 'creator_ton_address', type: 'TEXT NOT NULL DEFAULT \'\'' },
          { name: 'creator_stellar_address', type: 'TEXT NOT NULL DEFAULT \'\'' },
          { name: 'taker_ton_address', type: 'TEXT' },
          { name: 'taker_stellar_address', type: 'TEXT' },
          { name: 'ton_htlc_address_user_a', type: 'TEXT' },
          { name: 'ton_htlc_address_user_b', type: 'TEXT' },
          { name: 'stellar_htlc_address_user_a', type: 'TEXT' },
          { name: 'stellar_htlc_address_user_b', type: 'TEXT' }
        ];
        columns.forEach(col => {
          db.run(`ALTER TABLE offers ADD COLUMN ${col.name} ${col.type}`, (alterErr) => {
            if (alterErr && !alterErr.message.includes('duplicate column name')) {
                console.warn(`Warning trying to add column ${col.name}: ${alterErr.message}`);
            }
          });
        });
        console.log('Ensured new address columns for users and HTLCs exist.');
        // Note: Old address columns like fromuser, touser, walletfrom, walletto, 
        // creator_address_network_from etc. are NOT explicitly dropped by this script.
        // For a clean schema, deleting htlc.db before server start is recommended during this dev phase.
      }
    });
  });
}

export default db;
